{"version":3,"sources":["Theme/theme.ts","common/util/UrlUtil.ts","service/UrlShortenerService.ts","common/components/Title.tsx","common/components/Subheader.tsx","form.ts","common/components/UrlShortenerForm.tsx","common/components/Output.tsx","App/AppLayout.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","purple","secondary","green","typography","h1","fontSize","fontWeight","lineHeight","h2","h3","UrlUtil","suffix","process","UrlShortenerService","createUrlEntry","form","a","fetch","method","headers","body","JSON","stringify","response","json","data","shortenedUrl","Title","props","Typography","variant","children","Subheader","Form","suffix_","destinationUrl_","this","destinationUrl","useStyles","makeStyles","textField","maxWidth","marginTop","buttonField","UrlShortenerForm","classes","useState","customSuffix","setCustomSuffix","setDestinationUrl","TextField","id","label","helperText","multiline","rowsMax","className","onChange","event","target","value","Button","onClick","onSubmit","color","Output","output","AppLayout","setOutput","Box","display","justifyContent","flexDirection","width","mx","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ce2dc1b.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport green from \"@material-ui/core/colors/green\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: purple[500],\r\n    },\r\n    secondary: {\r\n      main: green[500],\r\n    },\r\n  },\r\n  typography: {\r\n    h1: {\r\n      fontSize: 30,\r\n      fontWeight: \"bolder\",\r\n      lineHeight: 1.5,\r\n    },\r\n    h2: {\r\n      fontSize: 25,\r\n      fontWeight: \"bold\",\r\n      lineHeight: 1.5,\r\n    },\r\n    h3: {\r\n      fontSize:20,\r\n      lineHeight: 1.5,\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","const toEndpointRoute = (suffix: string): string => {\r\n  return process.env.REACT_APP_API_BASE_URL + \"/\" + suffix;\r\n};\r\n\r\nexport const UrlUtil = {\r\n  toEndpointRoute,\r\n};\r\n","import { Form } from \"../form\";\r\nimport { UrlUtil } from \"../common/util/UrlUtil\";\r\n\r\nconst createUrlEntry = async (form: Form): Promise<string> => {\r\n  const response = await fetch(UrlUtil.toEndpointRoute(\"submit\"), {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ form }),\r\n  });\r\n  const data = await response.json();\r\n  return data.shortenedUrl;\r\n};\r\n\r\nexport const UrlShortenerService = {\r\n  createUrlEntry,\r\n};\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ninterface Props {}\r\n\r\nconst Title = (props: React.PropsWithChildren<Props>) => {\r\n  return <Typography variant=\"h1\">{props.children}</Typography>;\r\n};\r\n\r\nexport default Title;","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ninterface Props {}\r\n\r\nconst Subheader = (props: React.PropsWithChildren<Props>) => {\r\n  return <Typography variant=\"h2\">{props.children}</Typography>;\r\n};\r\n\r\nexport default Subheader;","export class Form {\r\n    private suffix_: string;\r\n    private destinationUrl_: string;\r\n\r\n    constructor() {\r\n        this.suffix_ = \"\";\r\n        this.destinationUrl_ = \"\";\r\n    }\r\n\r\n    get suffix(): string {\r\n        return this.suffix_;\r\n    }\r\n\r\n    set suffix(suffix: string) {\r\n        this.suffix_ = suffix;\r\n    }\r\n\r\n    get destinationUrl(): string {\r\n        return this.destinationUrl_;\r\n    }\r\n\r\n    set destinationUrl(destinationUrl: string) {\r\n        this.destinationUrl_ = destinationUrl;\r\n    }\r\n\r\n}","import React, { useState } from \"react\";\r\nimport Title from \"./Title\";\r\nimport Subheader from \"./Subheader\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport { Form } from \"../../form\";\r\n\r\ninterface Props {\r\n  onSubmit: (form: Form) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    maxWidth: \"1000px\",\r\n    marginTop: \"5px\",\r\n  },\r\n  buttonField: {\r\n    marginTop: \"5px\",\r\n  },\r\n}));\r\n\r\nconst UrlShortenerForm = (props: Props) => {\r\n  const classes = useStyles();\r\n  const [customSuffix, setCustomSuffix] = useState(\"\");\r\n  const [destinationUrl, setDestinationUrl] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <Title>ACE Coding Test</Title>\r\n      <Subheader>Url Shortener</Subheader>\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Please enter a suffix\"\r\n        helperText=\"*Suffix will be used as part of the url\"\r\n        variant=\"outlined\"\r\n        multiline\r\n        rowsMax={2}\r\n        className={classes.textField}\r\n        onChange={(event: any) => {\r\n          setCustomSuffix(event.target.value);\r\n        }}\r\n      />\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Please enter destination url\"\r\n        variant=\"outlined\"\r\n        multiline\r\n        rowsMax={4}\r\n        className={classes.textField}\r\n        onChange={(event: any) => {\r\n          setDestinationUrl(event.target.value);\r\n        }}\r\n      />\r\n      <Button\r\n        variant=\"outlined\"\r\n        className={classes.buttonField}\r\n        onClick={(event) => {\r\n          const form = new Form();\r\n          form.suffix = customSuffix;\r\n          form.destinationUrl = destinationUrl;\r\n          props.onSubmit(form);\r\n        }}\r\n        color=\"primary\"\r\n      >\r\n        Convert\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UrlShortenerForm;\r\n","import React from \"react\";\r\nimport Title from \"./Title\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  output: string;\r\n}\r\n\r\nconst Output = (props: Props) => {\r\n  return (\r\n    <>\r\n      <Title>Output URL</Title>\r\n      <Typography>{props.output}</Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Output;\r\n","import { Box, Typography } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Title from \"../common/components/Title\";\r\nimport { UrlUtil } from \"../common/util/UrlUtil\";\r\nimport { Form } from \"../form\";\r\nimport { UrlShortenerService } from \"../service/UrlShortenerService\";\r\nimport UrlShortenerForm from \"../common/components/UrlShortenerForm\";\r\nimport Output from \"../common/components/Output\";\r\n\r\nconst AppLayout = () => {\r\n  const [output, setOutput] = useState(\"\");\r\n\r\n  const onSubmit = async (form: Form) => {\r\n    const shortenedUrl = await UrlShortenerService.createUrlEntry(form);\r\n    setOutput(shortenedUrl);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        width=\"1000px\"\r\n        mx=\"10px\"\r\n        marginTop=\"5px\"\r\n      >\r\n        <UrlShortenerForm onSubmit={onSubmit} />\r\n        <Output output={output} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import { ThemeProvider } from \"@material-ui/core\";\nimport \"fontsource-roboto\";\nimport React from \"react\";\nimport theme from \"../Theme/theme\";\nimport \"./App.css\";\nimport AppLayout from \"./AppLayout\";\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <AppLayout />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}